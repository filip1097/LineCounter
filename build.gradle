plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Antlr plugin for test generation
    id 'antlr'
}

repositories {
    // Finds dependencies in Maven Central
    mavenCentral()
}

dependencies {
    // antlr4 parser generator:
    antlr 'org.antlr:antlr4:4.8-1'
    implementation 'org.antlr:antlr4-runtime:4.8-1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
    test.java.srcDirs = ['src/test/java']
}

// Configuration for the test running.
test {
    testLogging.events 'passed', 'failed'
    testLogging.exceptionFormat = 'full' // Full error output for test failures.
    // dependsOn 'cleanTest'
}

jar {
  manifest.attributes 'Main-Class' : 'LineCounter.Main'
  archiveName = 'LineCounter.jar'

  // This includes the dependencies in the jar (to allow independent running).
  from{
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
}

// Generate antlr files.
generateGrammarSource {
  outputDirectory file('src/main/antlr')
  arguments += ['-no-listener']
  arguments += ['-package', 'antlr']
  source = fileTree(dir: 'src/main/antlr').matching {
    include '*.g4'
  }

  doLast {
    mkdir('src/main/java/antlr')
    copy {
      from 'src/main/antlr'
      include '*.java'
      into 'src/main/java/antlr'
    }
  }
}

clean.dependsOn 'removeGeneratedAntlrCode'

task removeGeneratedAntlrCode(type: Delete) {
    description 'Removes antlr code'
    delete fileTree('src/main/antlr').matching {
        include '*.java'
        include '*.interp'
        include '*.tokens'
    }
    // A gen folder can be created if there is an error in the antlr task
    delete file('src/main/gen')
    delete file('src/main/antlr/gen')
    delete file('src/test/gen')
}
